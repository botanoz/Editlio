@model Editlio.Web.Models.PageViewModel

<!-- Modal -->
<div class="modal fade" id="fileManagementModal" tabindex="-1" aria-labelledby="fileManagementModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="fileManagementModalLabel">
                    <i class="fas fa-folder-open me-2"></i>Dosya Yönetimi
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Kapat"></button>
            </div>
            <div class="modal-body">
                <!-- Yükleme Göstergesi -->
                <div id="loadingSpinner" class="text-center d-none">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Yükleniyor...</span>
                    </div>
                    <p class="mt-2">Yükleniyor...</p>
                </div>

                @if (Model.IsEditable)
                {
                    <div class="upload-section mb-4">
                        <div class="mb-3">
                            <label for="fileInput" class="form-label">
                                <i class="fas fa-upload me-2"></i>Upload Files
                            </label>
                            <input type="file" class="form-control file-input" id="fileInput" multiple>
                        </div>
                        <button type="button" class="btn btn-primary upload-btn" id="uploadFilesBtn">
                            <i class="fas fa-cloud-upload-alt me-2"></i>Yükle
                        </button>
                    </div>
                }

                <!-- Dosya Listesi -->
                <div class="recent-files">
                    <h6 class="files-title"><i class="fas fa-history me-2"></i>Recent Files (@Model.TotalFiles)</h6>
                    <div class="list-group" id="fileList">
                        @foreach (var file in Model.Files)
                        {
                            <div class="list-group-item file-item d-flex justify-content-between align-items-center">
                                <span>
                                    <i class="fas fa-file-alt me-2"></i>@file.FileName
                                    <small class="text-muted">(@(file.FileSize / 1024) KB)</small>
                                </span>
                                <div class="btn-group">
                                    <a href="@file.FilePath" class="btn btn-outline-primary btn-sm download-btn" download>
                                        <i class="fas fa-download me-1"></i>İndir
                                    </a>
                                    @if (Model.IsEditable)
                                    {
                                        <button class="btn btn-outline-danger btn-sm delete-btn" onclick="deleteFile(@file.Id, '@file.FilePath')">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    }
                                </div>
                            </div>
                        }
                        @if (!Model.Files.Any())
                        {
                            <div class="text-center p-3 text-muted empty-state">
                                <i class="fas fa-folder-open mb-2 empty-icon"></i>
                                <p class="mb-0">Henüz dosya yüklenmemiş</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Dosya listesini yenileme fonksiyonu
    async function refreshFileList() {
        const fileList = document.querySelector('#fileList');
        const loadingSpinner = document.querySelector('#loadingSpinner');

        try {
            console.log('Refreshing file list...');
            loadingSpinner.classList.remove('d-none');
            fileList.classList.add('d-none');

            const pageId = '@Model.Id';
            const slug = '@Model.Slug';
            const response = await fetch(`/FileUpload/GetFiles?pageId=${pageId}&slug=${slug}`);

            console.log('Refresh response status:', response.status);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            console.log('Refresh result:', result);

            if (result.success && result.html) {
                fileList.innerHTML = result.html;
            } else {
                throw new Error(result.message || 'Dosya listesi alınamadı');
            }
        } catch (error) {
            console.error('Error refreshing file list:', error);
            toastr.error('Dosya listesi yenilenirken bir hata oluştu');
        } finally {
            loadingSpinner.classList.add('d-none');
            fileList.classList.remove('d-none');
        }
    }

    // Dosya yükleme işlemi
    document.getElementById('uploadFilesBtn')?.addEventListener('click', async function () {
        const fileInput = document.getElementById('fileInput');
        const files = fileInput.files;
        const uploadButton = this;
        const originalButtonText = uploadButton.innerHTML;

        if (files.length === 0) {
            toastr.warning('Lütfen dosya seçin');
            return;
        }

        try {
            uploadButton.disabled = true;
            uploadButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Yükleniyor...';

            const formData = new FormData();
            for (let i = 0; i < files.length; i++) {
                formData.append('files', files[i]);
            }
            formData.append('pageId', '@Model.Id');
            formData.append('slug', '@Model.Slug');

            const response = await fetch('/FileUpload/Upload', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            if (result.success) {
                toastr.success('Dosyalar başarıyla yüklendi');
                window.location.reload();
            } else {
                throw new Error(result.message || 'Yükleme başarısız');
            }
        } catch (error) {
            console.error('Upload error:', error);
            toastr.error('Dosya yüklenirken bir hata oluştu');
        } finally {
            uploadButton.disabled = false;
            uploadButton.innerHTML = originalButtonText;
        }
    });

    // Dosya silme işlemi
    async function deleteFile(fileId, filePath) {
        const result = await Swal.fire({
            title: 'Emin misiniz?',
            text: "Bu dosyayı silmek istediğinizden emin misiniz?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#7c3aed',
            cancelButtonColor: '#ef4444',
            confirmButtonText: 'Evet, sil!',
            cancelButtonText: 'İptal'
        });

        if (result.isConfirmed) {
            try {
                const response = await fetch(`/FileUpload/Delete/${fileId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        slug: '@Model.Slug',
                        filePath: filePath
                    })
                });

                const data = await response.json();
                if (data.success) {
                    toastr.success('Dosya başarıyla silindi');
                    await refreshFileList();
                } else {
                    throw new Error(data.message || 'Silme işlemi başarısız');
                }
            } catch (error) {
                toastr.error('Dosya silinirken bir hata oluştu');
                console.error('Delete error:', error);
            }
        }
    }
</script>